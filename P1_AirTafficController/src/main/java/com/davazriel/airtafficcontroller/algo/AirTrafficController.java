package com.davazriel.airtafficcontroller.algo;

import com.davazriel.airtafficcontroller.model.Airport;
import com.davazriel.airtafficcontroller.model.Flight;
import com.davazriel.airtafficcontroller.utils.DataReader;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;
import net.sf.jclec.base.AbstractEvaluator;
import net.sf.jclec.fitness.SimpleValueFitness;
import net.sf.jclec.fitness.ValueFitnessComparator;
import net.sf.jclec.orderarray.OrderArrayIndividual;
import org.apache.commons.configuration.Configuration;

import java.util.Comparator;
import java.util.List;
import java.util.ArrayList;

public class AirTrafficController extends AbstractEvaluator implements IConfigure {

	// Auto generated by eclipse.
	private static final long serialVersionUID = -6267408581135583015L;

	private static final boolean MINIMIZE = true;

	private Comparator<IFitness> comparator;

	private int n_runways;

	private int[][] waitTimes;

	private List<Flight> flights;

	public AirTrafficController() {
		super();
		flights = new ArrayList<>();
	}

	@Override
	protected void evaluate(IIndividual ind) {
		// Individual genotype
		int[] genotype = ((OrderArrayIndividual) ind).getGenotype();
		Airport airport = new Airport(n_runways, waitTimes);
		for (int individual : genotype) {
			Flight flight = flights.get(individual);
			airport.scheduleFlight(flight.copy());
		}
		ind.setFitness(new SimpleValueFitness(airport.getAccumulatedDelay()));
	}

	@Override
	public Comparator<IFitness> getComparator() {
		if (comparator == null) {
			comparator = new ValueFitnessComparator(MINIMIZE);
		}
		return comparator;
	}

	@Override
	public void configure(Configuration conf) {
		String waitTimesFileName = conf.getString("[@wait-times-file]");
		String flightsFileName = conf.getString("[@flights-file]");
		String[] flightString = null;
		int n_flights = 0;

		DataReader waitTimesDataReader = new DataReader();
		waitTimesDataReader.openFile(waitTimesFileName);
		waitTimes = waitTimesDataReader.readMatrix(3, 3);
		waitTimesDataReader.closeFile();

		DataReader flightsDataReader = new DataReader();
		flightsDataReader.openFile(flightsFileName);
		while (flightsDataReader.ready()) {
			flightString = flightsDataReader.readLine();
			int[] runwayETAs = new int[flightString.length - 2];
			for (int i = 2; i < flightString.length; i++) {
				runwayETAs[i - 2] = Integer.valueOf(flightString[i]);
			}
			flights.add(new Flight(flightString[0], Flight.PlaneType.valueOf(flightString[1]), runwayETAs));
			n_flights++;
		}
		flightsDataReader.closeFile();

		n_runways = flightString.length - 2;
		
	}
}
