package com.davazriel.airtafficcontroller.algo;

import com.davazriel.airtafficcontroller.model.Airport;
import com.davazriel.airtafficcontroller.model.Flight;
import com.davazriel.airtafficcontroller.utils.DataReader;
import net.sf.jclec.IConfigure;
import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;
import net.sf.jclec.base.AbstractEvaluator;
import net.sf.jclec.fitness.SimpleValueFitness;
import net.sf.jclec.fitness.ValueFitnessComparator;
import net.sf.jclec.orderarray.OrderArrayIndividual;
import org.apache.commons.configuration.Configuration;

import java.util.Comparator;
import java.util.List;
import java.util.ArrayList;

public class AirTrafficController extends AbstractEvaluator implements IConfigure {

    // Auto generated by eclipse.
    private static final long serialVersionUID = -6267408581135583015L;
    private static final boolean MINIMIZE = true;

    private Comparator<IFitness> comparator;
    private String flightsFile;
    private String waitTimesFileName;

    private int nRunways;
    private int[][] waitTimes;
    private List<Flight> flights;

    public AirTrafficController() {
        super();
        flights = new ArrayList<>();
    }

    @Override
    protected void evaluate(IIndividual ind) {
        // Individual genotype
        int[] genotype = ((OrderArrayIndividual) ind).getGenotype();
        // Create airport
        Airport airport = new Airport(nRunways, waitTimes);
        // Schedule flights
        Flight[] scheduleFlights = new Flight[genotype.length];
        for (int i = 0; i < genotype.length; i++) {
            scheduleFlights[genotype[i]] = flights.get(i);
        }
        for (Flight scheduleFlight : scheduleFlights) {
            airport.scheduleFlight(scheduleFlight);
        }
        // Calculate fitness
        ind.setFitness(new SimpleValueFitness(airport.getMaxATA()));
    }

    @Override
    public Comparator<IFitness> getComparator() {
        if (comparator == null) {
            comparator = new ValueFitnessComparator(MINIMIZE);
        }
        return comparator;
    }

    @Override
    public void configure(Configuration conf) {
        this.waitTimesFileName = conf.getString("[@wait-times-file]");
        this.flightsFile = conf.getString("[@flights-file]");
        String[] flightString = null;
        int n_flights = 0;

        DataReader dataReader = new DataReader();
        dataReader.openFile(waitTimesFileName);
        waitTimes = dataReader.readMatrix(3, 3);
        dataReader.closeFile();

        dataReader.openFile(flightsFile);
        while (dataReader.ready()) {
            flightString = dataReader.readLine();
            int[] runwayETAs = new int[flightString.length - 2];
            for (int i = 2; i < flightString.length; i++) {
                runwayETAs[i - 2] = Integer.valueOf(flightString[i]);
            }
            flights.add(new Flight(flightString[0], Flight.PlaneType.valueOf(flightString[1]), runwayETAs));
            n_flights++;
        }
        dataReader.closeFile();

        nRunways = flightString.length - 2;
    }

    public String getFlightsFile() {
        return flightsFile;
    }

    public void setFlightsFile(String flightsFile) {
        this.flightsFile = flightsFile;
    }

    public String getWaitTimesFileName() {
        return waitTimesFileName;
    }

    public void setWaitTimesFileName(String waitTimesFileName) {
        this.waitTimesFileName = waitTimesFileName;
    }
}
